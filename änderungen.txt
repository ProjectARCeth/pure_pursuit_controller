// Im main file wurde der Name des Nodes geändert.
	regler node wurde im main umbenannt in high_level_controller


// Folgende Methode wurde vorläufig entfernt um code übersichtlich zu halten
// Auch ist unklar was diese Methode genau macht.
// War teil vom PP body file.

	void PurePursuit::calculateAccel()
	{
	//First calculate optimal velocity
	//for the moment take curvature at fix distance lad_v
	float lad_v;
	float curve_rad=1/curvaturePath(lad_v);
	float v_limit=sqrt(mu_haft*curve_rad*g_earth);

	//safety factor [0-1]
	float C=1;

	//penalize lateral error from paht, half for 1m error
	C=C*1/(1+abs(lateral_error_));

	//slow down gradually when arrive at l_slow_down from end of of path
	float l_slow_down=20;
	float l_dumb=0;
	int i=n_poses_path_;
	while(l_dumb<l_slow_down)
		{
		l_dumb+=sqrt(pow(path_.poses[i-1].pose.position.x-path_.poses[i-2].pose.position.x,2)+pow(path_.poses[i-1].pose.position.y-path_.poses[i-2].pose.position.y,2));
		i=i-1;
		}
	if (state_.current_arrayposition>i)
		{
		std::cout<<"SLOW DOWN we reached index "<<i;
		C=C*(n_poses_path_-state_.current_arrayposition-1)/(n_poses_path_-i);
		}

	float v_ref=C*v_limit;
	//upper limit, HERE 25 m/s;
	if(v_ref>v_max)
		{
		std::cout<<"Upper limit of 25 reached. "<<v_ref<<" is too fast"<<std::endl;
		v_ref=v_max;
		}
	//not too divergent from teach part.... not possible because no v info of teach part

	//Conversion  to accelleration
	//make it dependent from street inclination measurable from state: a*=1+inclination;
	float a=0.5;
	//Control of acceleration, proportional control
	float v_now=sqrt(pow(state_.pose_diff.twist.linear.x,2)+pow(state_.pose_diff.twist.linear.x,2));
	float delta_v=v_ref-v_now;
	a=0.08*delta_v;
	u_.acceleration=a;

	std::cout<<"v_limit= "<<v_limit<<std::endl<<"v_ref= "<<v_ref<<std::endl<<"v_now= "<<v_now<<std::endl<<"Acceleration= "<<a<<std::endl;
	}

  // Folgender Code wurde aus dem PP body file entfernt, da er auskommentiert war mit der Bemerkung: Fehlerhaft

  	/*Alternativ:Senkrecht zum auto den punkt auf dem Pfad nehmen... Fehlerheft...
  	bool b=0;
  	float ox=state_.pose.pose.orientation.x;		//Transformation von Quaternion zu Euler
  	float oy=state_.pose.pose.orientation.y;
  	float oz=state_.pose.pose.orientation.z;
  	float ow=state_.pose.pose.orientation.w;
  	const Eigen::Vector4d quat(ox, oy, oz, ow);
  	geometry_msgs::Vector3 eul;
  	eul=arc_tools::transformEulerQuaternionMsg(quat);
  	float theta=eul.z;
  	for(int i=0;i<n_poses_path_-10;i++)		//schaut ALLE linearen Interpolationen
  										//zw punktepaaren durch
  		{
  		float x_j=path_.poses[i+1].pose.position.x;
  		float x_i=path_.poses[i].pose.position.x;
  		float y_j=path_.poses[i+1].pose.position.y;
  		float y_i=path_.poses[i].pose.position.y;
  		float lambda=(tan(theta)*(y_i-y_now)-(x_i-x_now))/((x_j-x_i)-tan(theta)*(y_j-y_i));	//analytisch
  		float dist_to_path=sqrt(pow((x_now-x_i),2)+pow((y_now-y_i),2));
  		float dist_to_path_old=100000;
  		if(0<=lambda&&lambda<=1&&dist_to_path<dist_to_path_old)
  			{
  			x_projected[0]=x_i+lambda*(x_j-x_i);
  			x_projected[1]=y_i+lambda*(y_j-y_i);
  			x_projected[2]=i;
  			dist_to_path_old=dist_to_path;
  			std::cout<<"ciao"<<std::endl;
  			b=1;
  			}
  		}
  	if(b==0)
  		{
  		std::cout<<"Fehler, senkrecht zu Fahrzeug liegt kein Pfad, es bewegt sicj nun zum Pfadanfang";
  		x_projected[0]=0;
  		x_projected[1]=0;
  		x_projected[2]=5;
  		}*/

// Folgender Code wurde aus dem PP Constructor entfernt, da RVIZ vorerst nicht gebraucht wird.
	//Für RVIZ Darstellung.
	path_publisher = n_->advertise<nav_msgs::Path>("/path",10);
	int s = sizeof(path_.poses)/sizeof(path_.poses[0]);

// Folgender Code wurde aus dem PP body file entfernt, da unklar war wozu gebraucht.
	float mu_haft = 0.8;
	float g_earth = 9.81;
	float v_max = 25;

// Folgender Code wurde im PP body file aus der Methode sts entfernt
	this -> path_publisher.publish(path_);

// Nun ist der Speicherort des Pfades nicht mehr hard-coded sondern kann im PP main file eingestellt werden.

// Folgender code wurde aus dem PP body file entfernt.
	//Falls parametrisierte Kurve gebraucht wird.
	float* PurePursuit::pathInfo(float where)
	{
	float R=20;
	float x_pfad[2]={where,(R*sin(where/15))};
	float *pointer;
	pointer= x_pfad ;
	return pointer;
	}

// Entfernt aus dem PP Constructor, da Testing in einem separaten Node passieren soll.
	manual_u_ = false;

// Entfernt aus PP hpp file
	//manuelles überschreiben von u möglich
	void setU(ackermann_msgs::AckermannDrive u);
	void setManual(bool b);


// Changed from calcAccel zu calcVel

// Entfernt aus pp hpp
	// Parametrized path. Was mainly used in the early stages of development.
	float* pathInfo(float where);

// Entfernt aus pp body file
	global = 0;

// Changed subscribed to incoming_state in callback function sts.

// Folgendes wurde aus dem body file entfernt.
	void PurePursuit::setU(ackermann_msgs::AckermannDrive u)
	{
		this->u_=u;
		manual_u_=true;
	}
	void PurePursuit::setManual(bool b)
	{
	manual_u_=b;
	}

// Removed from pp hpp.
	bool manual_u_;
	ros::Subscriber sub_path_;
	float global;

// Aus body file in der methode: calculateSteer entfernt.
	if(manual_u_==false){} um alles.

// Entfernt aus pp hpp public
	void setState(float x, float y);
	float curvaturePath(float lad_v);

// Entfernt aus hpp pp, da nicht genutzt
	void safeThePath(const nav_msgs::Path subscribed);

// Entfernt aus pp body file

	void PurePursuit::setState(float x, float y)
	{
	state_.pose.pose.position.x = x;
	state_.pose.pose.position.y = y;
	}


	//Ersteller einer Fake-Krümmung fürs Moment
	float PurePursuit::curvaturePath(float lad_v)
	{
		return 0.01;
	}

	// Entfernt aus pp hpp, da keine methode im body file ausdefiniert.
		void safeTheState();

// Entfernt aus pp body file
//Entweder.

	//float j=findReference(lad);		//Pfad unten parametrisiert
	//float dy=pathInfo(j)[1]-(state_.pose.pose.position.y);
	//float dx=pathInfo(j)[0]-(state_.pose.pose.position.x);
	//float theta1=atan2(dy,dx);
//Oder.

// Entfernt aus body file, da nicht mit parametrisierter Kurve gearbeitet wird.
//welcher punkt auf Pfad hat gewissen Abstand l von mir.
float PurePursuit::findReference(float l)
	{
	float e=1000;
	float j;
	for(float i=global; i<(global+200); i=i+0.1)
		{
		float x_pfad = pathInfo(i)[0];
		float y_pfad = pathInfo(i)[1];
		float x_now = state_.pose.pose.position.x;
		float y_now = state_.pose.pose.position.y;
		float d = fabs(l-sqrt(pow((x_now-x_pfad),2)+pow((y_now-y_pfad),2)));
		if(d<e)
			{
			e=d;
			j=i;
			}
		}
	global = j;
	return j;
	}

	// Entfernt von pp hpp
	float findReference(float l);

	// Entfernt aus calSteer methode
	float v = 10.0;

	// Nearest point methode returns an index and not a vector anymore.
